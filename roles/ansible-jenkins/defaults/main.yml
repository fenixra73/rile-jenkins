---
jenkins_version: "2.235.5"  # The exact version of jenkins to deploy

jenkins_hostname: "127.0.0.1"  # The hostname that Jenkins will be accessible on
# The port that Jenkins will listen on for unsecured (HTTP) requests. Define to -1 to
# disable HTTP.
jenkins_port: "8080"
# The port that Jenkins will listen on for secured (HTTPS) requests. Define to -1 to
# disable HTTPS. Enabling this option requires a SSL certificate (see below).
jenkins_port_https: "-1"
jenkins_home: /data/jenkins  # The directory on the server where the Jenkins configs live
jenkins_admin: "fenixra73@gmail.com"  # The administrator email address for the server

# If you need to override any java options then do that here.
jenkins_java_opts: "-Djenkins.install.runSetupWizard=false"

# Configuration files owner and group
jenkins_config_owner: "jenkins"       # for example "ubuntu" or "light" defined in group_vars
jenkins_config_group: "jenkins"

# The locations of the configuration files for jenkins
jenkins_source_dir_configs: "{{ playbook_dir }}/roles/ansible-jenkins/jenkins-configs"
jenkins_source_dir_jobs: "{{ jenkins_source_dir_configs }}/roles/ansible-jenkins/jobs"
jenkins_source_dir_nodes: "{{ jenkins_source_dir_configs }}/roles/ansible-jenkins/nodes"

# When defined, include this task file after configuring jobs. This happens
# at the very end of the role, but before Jenkins is taken out of quiet mode.
jenkins_after_config_jobs_file: false

# config.xml template source
jenkins_source_config_xml: "{{ jenkins_source_dir_configs }}/config.xml"

# Include custom files for jenkins installation
jenkins_include_custom_files: false
jenkins_custom_files: {}  # src and dest names

# Include secrets directory during installation
jenkins_include_secrets: false
jenkins_source_secrets: "{{ jenkins_source_dir_configs }}/secrets/"

# The names of the jobs (config.xml must exist under jenkins_source_dir_jobs/job_name/)
jenkins_jobs: 
  - pipeline1

# The names of the jobs (config.xml must exist under jenkins_source_dir_nodes/node_name/)
jenkins_nodes: 
  - slave_name

# List of plugins to install in the Jenkins instance
jenkins_plugins:
  - ace-editor
  - ansible
  - ant
  - antisamy-markup-formatter
  - apache-httpcomponents-client-4-api
  - bouncycastle-api
  - branch-api
  - build-timeout
  - cloudbees-folder
  - command-launcher
  - credentials
  - credentials-binding
  - display-url-api
  - durable-task
  - docker-workflow
  - echarts-api
  - email-ext
  - google-oauth-plugin
  - git
  - git-client
  - git-server
  - github
  - github-oauth
  - github-api
  - github-branch-source
  - gradle
  - groovy
  - greenballs
  - handlebars
  - jackson2-api
  - jdk-tool
  - jquery-detached
  - jquery3-api
  - jsch
  - junit
  - ldap
  - lockable-resources
  - locale
  - mailer
  - mapdb-api
  - matrix-auth
  - matrix-project
  - momentjs
  - okhttp-api
  - pam-auth
  - pipeline-build-step
  - pipeline-github-lib
  - pipeline-graph-analysis
  - pipeline-input-step
  - pipeline-milestone-step
  - pipeline-model-api
  - pipeline-model-definition
  - pipeline-model-extensions
  - pipeline-rest-api
  - pipeline-stage-step
  - pipeline-stage-tags-metadata
  - pipeline-stage-view
  - plain-credentials
  - plugin-util-api
  - resource-disposer
  - scm-api
  - script-security
  - snakeyaml-api
  - ssh-agent
  - ssh-credentials
  - ssh-slaves
  - structs
  - subversion
  - timestamper
  - token-macro
  - trilead-api
  - workflow-aggregator
  - workflow-api
  - workflow-basic-steps
  - workflow-cps
  - workflow-cps-global-lib
  - workflow-durable-task-step
  - workflow-job
  - workflow-multibranch
  - workflow-scm-step
  - workflow-step-api
  - workflow-support
  - ws-cleanup


# How long to wait for installing plugins, in seconds. If you are seeing failures in the
# "Wait for plugins to finish installing" task with an error message like "Timeout when
# waiting for file <plugin_name.jpi>", you may want to increase this value.
jenkins_plugin_timeout: 300

# List of sources of custom jenkins plugins to install
jenkins_custom_plugins: []

#######################
# Authentication vars #
#######################

# Mechanism to use when authenticating to Jenkins. Must be one of the following values:
# - api: Use an API token which belongs to a specific user
# - crumb: Use anonymous crumb-based authentication
# - none: No security (not recommended)
# For more information, please refer to the "Authentication and Security" section of the
# README.
jenkins_auth: "crumb"

# When defined, use this API token instead of getting a crumb from the system. Requires
# jenkins_api_username.
jenkins_api_token: ""
# Username which owns the above API token.
jenkins_api_username: ""

#########################################
# SSL vars: apply to Jenkins HTTPS only #
#########################################

# See https://wiki.jenkins.io/display/JENKINS/Starting+and+Accessing+Jenkins for more info

# Jenkins JKS keystore file. Mutually exclusive with the certificate/private key options.
jenkins_https_keystore: ""
# Jenkins JKS keystore password.
jenkins_https_keystore_password: ""

# Jenkins CA signed certificate file. Mutually exclusive with the keystore options.
jenkins_https_certificate: ""
# Jenkins CA signed certificate private key.
jenkins_https_private_key: ""

# Set to false if you are using a self-signed certificate and wish to ignore any
# certificate verification errors from Ansible.
jenkins_https_validate_certs: true

###################################################
# Docker vars: apply to deploying via docker only #
###################################################

# The docker hub image name
jenkins_docker_image: "jenkins/jenkins"

# Configs specific to the "docker" method of running jenkins
# The name of the jenkins container
jenkins_docker_container_name: jenkins

# Default, if true, the port will be exposed on the host (using "port")
# If set to false, the port will only be exposed to other containers (using "expose")
jenkins_docker_expose_port: true


#############################################
# Apt vars: apply to deploying via apt only #
#############################################

# Packages which are to be installed on the jenkins instance
jenkins_apt_packages:
  - openjdk-8-jdk

# Java version to use. Note that JDK 8 is required for Jenkins
# 2.54 or greater.
jenkins_java_version: "java-1.8.0-openjdk-amd64"
